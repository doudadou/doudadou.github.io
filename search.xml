<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>【Swoole】Swoole多进程不能共用连接&amp;TCP协议包完整性</title>
      <link href="/2017/04/25/swoole-multiple-processes/"/>
      <url>/2017/04/25/swoole-multiple-processes/</url>
      
        <content type="html"><![CDATA[<h1 id="多进程不能共用连接"><a href="#多进程不能共用连接" class="headerlink" title="多进程不能共用连接"></a>多进程不能共用连接</h1><p><a href="https://wiki.swoole.com/wiki/page/325.html" target="_blank" rel="noopener">官方文档</a></p><p>其实这个是所有多进程、多线程程序都需要注意的问题，当进程or线程共享资源的时候，一定要考虑资源冲突，否则会出现各种诡异的问题（死锁、数据返回异常、连接被关闭等等等）。</p><p>如下代码，在Swoole中，在server启动时创建了一个redis连接，在<code>onRequest</code>中使用。</p><p>代码看上去没什么问题，但是实际使用时，如果压力很大，就会出现多进程抢占连接导致的问题。原因是因为创建的redis连接实际上是一个全局对象，每个work进程都在使用同一个连接。</p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> $redis;</span><br><span class="line">     <span class="keyword">public</span> $server;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//initServer</span></span><br><span class="line">    $server = <span class="keyword">new</span> swoole_http_server(</span><br><span class="line">    <span class="keyword">$this</span>-&gt;productConfig[<span class="string">"server"</span>][<span class="string">"host"</span>], </span><br><span class="line">    <span class="keyword">$this</span>-&gt;productConfig[<span class="string">"server"</span>][<span class="string">"port"</span>]);</span><br><span class="line">    $server-&gt;on(<span class="string">'request'</span>, <span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="string">'onRequest'</span>));</span><br><span class="line">    $server-&gt;on(<span class="string">'workerstart'</span>, <span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="string">'onWorkerStart'</span>));</span><br><span class="line">    <span class="keyword">$this</span>-&gt;server = $server;</span><br><span class="line">    <span class="comment">//initRedis</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;redis = <span class="keyword">new</span> Redis();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;redis-&gt;connect(<span class="keyword">$this</span>-&gt;productConfig[<span class="string">"redis"</span>][<span class="string">"host"</span>], </span><br><span class="line">    <span class="keyword">$this</span>-&gt;productConfig[<span class="string">"redis"</span>][<span class="string">"port"</span>]);  </span><br><span class="line">    $server-&gt;start();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//请求处理函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span><span class="params">($request, $response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do some thing with redis</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;redis-&gt;get(<span class="string">"somekey"</span>);</span><br><span class="line">    $response-&gt;end(json_encode([<span class="string">"errno"</span> =&gt; <span class="number">0</span>]));</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//worker进程创建函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onWorkerStart</span><span class="params">($serv, $workerId)</span> </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  $server = <span class="keyword">new</span> Server();</span><br><span class="line">  $init   = $server-&gt;init();</span><br><span class="line">  <span class="keyword">if</span> ($init[<span class="string">"errno"</span>] !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(json_encode($init));</span><br><span class="line">  &#125; </span><br><span class="line">  $server-&gt;run();</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>不在server中创建，而在<code>onRequest</code>中，接收到请求时创建简单粗暴的解决方案，每次收到请求时独立创建局部的redis连接，请求结束后释放。这种方式缺点很明显，连接没有复用，影响性能。</li><li>在<code>onWorkerStart</code>中创建连接，并按<code>workerId</code>索引每个worker进程的redis连接。</li></ul><p>代码如下（主体代码参考上面），在Server中增加一个<code>redisPool</code>，worker启动时创建连接后注册到pool中。这样能保证每次请求时，使用的都是各进程独立的redis连接。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Server类中增加$redisPool变量，初始化为空数组</span></span><br><span class="line"><span class="keyword">public</span> $redisPool = [];</span><br><span class="line"><span class="comment">//worker进程创建函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onWorkerStart</span><span class="params">($serv, $workerId)</span> </span>&#123;</span><br><span class="line">   $redis   = <span class="keyword">new</span> \Redis();</span><br><span class="line">   $tmpRes  = $redis-&gt;connect(</span><br><span class="line">     <span class="keyword">$this</span>-&gt;productConfig[<span class="string">"redis"</span>][<span class="string">"host"</span>], </span><br><span class="line">     <span class="keyword">$this</span>-&gt;productConfig[<span class="string">"redis"</span>][<span class="string">"port"</span>]</span><br><span class="line">   );  </span><br><span class="line">   <span class="keyword">if</span> ($tmpRes === <span class="keyword">false</span>) &#123;</span><br><span class="line">     <span class="keyword">$this</span>-&gt;logger-&gt;error(<span class="string">"Redis Init failed workerId:$workerId"</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> $redis-&gt;setOption(</span><br><span class="line">   Redis::OPT_READ_TIMEOUT, </span><br><span class="line">   <span class="keyword">$this</span>-&gt;productConfig[<span class="string">"redis"</span>][<span class="string">"read_timeout"</span>]);</span><br><span class="line">   <span class="keyword">$this</span>-&gt;redisPool[$workerId] = $redis; <span class="comment">//将连接注册到pool中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求处理函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span><span class="params">($request, $response)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//do some thing with redis</span></span><br><span class="line">   $redis = <span class="keyword">$this</span>-&gt;redisPool[<span class="keyword">$this</span>-&gt;server-&gt;worker_id];</span><br><span class="line">   $response-&gt;end(json_encode([<span class="string">"errno"</span> =&gt; <span class="number">0</span>]));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="tcp协议包完整性"><a href="#tcp协议包完整性" class="headerlink" title="tcp协议包完整性"></a>tcp协议包完整性</h1><p><a href="https://wiki.swoole.com/wiki/page/50.html" target="_blank" rel="noopener">官方文档</a></p><p><a href="http://blog.csdn.net/ldy3243942/article/details/40920743?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">Swoole的自定义协议功能的使用</a></p><p>在默认情况下，使用swoole-server时（<code>TCP协议</code>），swoole不对包的进行完整性校验，在<code>onReceive</code>中接收到的包可能是不完整的，也有可能是多份数据。这是由于TCP协议的原理所造成的：</p><blockquote><p>TCP是一个流式协议。客户端向服务器发送的一段数据，可能并不会被服务器一次就完整的收到;客户端向服务器发送的多段数据，可能服务器一次就收到了全部的数据</p></blockquote><p>如下代码，在<code>onReceive</code>中接收到数据后，转给task进程进行处理，task进程处理结束后返回。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求处理（接收到客户端发送的数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onReceive</span><span class="params">(swoole_server $serv, int $fd, int $from_id, string $data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;logger-&gt;debug(<span class="string">"ReceiveMSG: "</span> . $data, [<span class="string">"fd"</span> =&gt; $fd]);</span><br><span class="line">    $params = [</span><br><span class="line">           <span class="string">"fd"</span>     =&gt; $fd,</span><br><span class="line">            <span class="string">"data"</span>   =&gt; $data</span><br><span class="line">    ];</span><br><span class="line">    $conInfo = $serv-&gt;connection_info($fd);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logger-&gt;debug(<span class="string">"conninfo fd:$fd "</span>, [<span class="string">"info"</span> =&gt; $conInfo]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;server-&gt;task($params);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实际的task处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onTask</span><span class="params">($serv, $taskId, $srcWorkerId, $params)</span> </span>&#123;</span><br><span class="line">  $fd     = $params[<span class="string">"fd"</span>];</span><br><span class="line">  $sendRes = $serv-&gt;send($fd, <span class="string">"hehe\t0\t[]\n"</span>);</span><br><span class="line">  <span class="keyword">$this</span>-&gt;logger-&gt;debug(<span class="string">"conninfo-InTask fd:$fd "</span>, [<span class="string">"sendRes"</span> =&gt; $sendRes]);</span><br><span class="line">  $serv-&gt;close($fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//与客户端的连接被关闭</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onClose</span><span class="params">(swoole_server $server, int $fd, int $reactorId)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;logger-&gt;debug(<span class="string">"fd:$fd is Close"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行时（发送的数据比较大），有可能出现这样的日志。从日志里可以看到</p><ol><li><p>同一个server_fd(53)接收到了两份数据，两份数据来自同一个client_fd(22)</p></li><li><p>第一个task向客户端发送数据成功了，但是第二个发送失败（<code>sendRes：false</code>）<br><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fxnt5m1douj31y007y0zp.jpg" alt=""><br>实际打印出数据（在onReceive中），会发现客户端发送的数据被拆成了两份，因此触发了<code>两次onReceive</code>。<br> 第二个task中sendRes失败，是因为在处理第一份数据时，task中已经把客户端连接给关闭了。</p></li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p><strong>open_eof_check</strong></p><p>使用Swoole提供的<code>open_eof_check</code>，保证数据包的完整性。</p><blockquote><p>此选项将检测客户端连接发来的数据，当数据包结尾是指定的字符串时才会投递给Worker进程。否则会一直拼接数据包，直到超过缓存区或者超时才会中止</p></blockquote><p>EOF即为数据的结束标记，具体由客户端使用的发送方式而定，比如Memcache协议以”<code>\r\n</code>”结尾，Java中BuffWriter.newLine()发送的数据在有可能是”<code>\n</code>“结尾，也有可能是”<code>\r\n</code>“。</p><p>注意：==swoole的EOF检测不会从数据中间查找eof字符串，所以Worker进程可能会同时收到多个数据包，需要在应用层代码中自行explode(“\n”, $data) 来拆分==，1.7.15版本增加了<code>open_eof_split</code>，支持从数据中查找EOF，并切分数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'open_eof_check'</span> =&gt; <span class="keyword">true</span>, <span class="comment">//打开EOF检测</span></span><br><span class="line"><span class="string">'package_eof'</span>    =&gt; <span class="string">"\n"</span>, <span class="comment">//设置EOF</span></span><br></pre></td></tr></table></figure><p><strong>手动拼接请求数据</strong></p><p>默认情况下，同一个客户端fd会被分配到<code>同一个worker</code>中处理，所以数据可以拼接起来，当发现结尾是EOF字符时才进行处理。</p><p>例如可以在全局数据中保存<code>一个数组buff</code>，接收到数据后进行拼接和判断。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$buff[$fd] .= $data;</span><br><span class="line"><span class="keyword">if</span> (substr($buff[$fd], <span class="number">-1</span>) == <span class="string">"\n"</span>) &#123;<span class="comment">//\n也可以是其他的EOF字符</span></span><br><span class="line">     <span class="comment">//数据完整，执行具体的逻辑</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//数据不完整，返回等待下次接收</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> Swoole </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【Ionic】Ionic实现iOS与Android端代码『热更新』与android升级下载功能 （ v1.3.x版本 ）</title>
      <link href="/2016/07/17/ionic-hotcode/"/>
      <url>/2016/07/17/ionic-hotcode/</url>
      
        <content type="html"><![CDATA[<h1 id="热更新的好处"><a href="#热更新的好处" class="headerlink" title="热更新的好处"></a>热更新的好处</h1><p>通常ionic源码可包括（HTML，JavaScript，CSS文件和其他资源），往常我们必须通过提交程序到应用市场，经过漫长的审核后才可让用户更新，每改动一个小地方都需要重新打新版本。</p><p>现在ionic通过使用cordova插件cordova-hot-code-push实现实现iOS与Android端代码『热更新』功能，可不必发布应用市场经平台审核，便可动态更新App源码的目的。</p><a id="more"></a><h1 id="热更新实现原理"><a href="#热更新实现原理" class="headerlink" title="热更新实现原理"></a>热更新实现原理</h1><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fxnmylv0zyj30qo0k0abq.jpg" alt=""></p><h1 id="基础实现方法"><a href="#基础实现方法" class="headerlink" title="基础实现方法"></a>基础实现方法</h1><h2 id="1、安装-cordova-hot-code-push-cli"><a href="#1、安装-cordova-hot-code-push-cli" class="headerlink" title="1、安装 cordova-hot-code-push-cli"></a>1、安装 cordova-hot-code-push-cli</h2><p>使用命令安装</p><pre><code>npm install -g cordova-hot-code-push-cli</code></pre><p>主要是生成检测配置文件，通常是在 www 目录下动态生成 chcp.json 和 chcp.manifest 生成两个文件，插件源码地址：</p><p><a href="https://github.com/nordnet/cordova-hot-code-push" target="_blank" rel="noopener">https://github.com/nordnet/cordova-hot-code-push</a></p><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>包含 www 目录的项目，已有项目无需重新创建</p><h2 id="3、安装热更新插件"><a href="#3、安装热更新插件" class="headerlink" title="3、安装热更新插件"></a>3、安装热更新插件</h2><p>使用命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic plugin add cordova-hot-code-push-pluginionic plugin add cordova-hot-code-push-local-dev-addon</span><br></pre></td></tr></table></figure><h2 id="4、打包封装"><a href="#4、打包封装" class="headerlink" title="4、打包封装"></a>4、打包封装</h2><p>执行命令<code>cordova-hcp build</code> 或者 <code>cordova build</code></p><h2 id="5、启动-hcp-server-服务"><a href="#5、启动-hcp-server-服务" class="headerlink" title="5、启动 hcp server 服务"></a>5、启动 hcp server 服务</h2><p>重新打开一个终端窗口，cd到项目目录（包含www目录的父级目录）执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova-hcp server</span><br></pre></td></tr></table></figure><p>稍等会在 www 目录下动态生成 chcp.json 和 chcp.manifest 生成两个文件</p><h2 id="6、正常在运行完成前4步以后会在我们config-xml动态加入如图所示链接地址"><a href="#6、正常在运行完成前4步以后会在我们config-xml动态加入如图所示链接地址" class="headerlink" title="6、正常在运行完成前4步以后会在我们config.xml动态加入如图所示链接地址"></a>6、正常在运行完成前4步以后会在我们config.xml动态加入如图所示链接地址</h2><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fxnrw3yiawj307e08hq3m.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fxnrx40w4nj30m507wjun.jpg" alt=""><br>图中链接地址<a href="https://1980480f.ngrok.io/chcp.json" target="_blank" rel="noopener">https://1980480f.ngrok.io/chcp.json</a>，修改为在第8步www目录里chcp.json文件可访问的地址：</p><p>例如：<a href="http://kaibin.me/hotcode/chcp.json">http://kaibin.me/hotcode/chcp.json</a></p><h2 id="7、运行代码或打包我们的App"><a href="#7、运行代码或打包我们的App" class="headerlink" title="7、运行代码或打包我们的App"></a>7、运行代码或打包我们的App</h2><h2 id="8、修改我们想要更新的代码"><a href="#8、修改我们想要更新的代码" class="headerlink" title="8、修改我们想要更新的代码"></a>8、修改我们想要更新的代码</h2><p>然后修改 chcp.json 文件的 content_url ，此地址为我们项目放置的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"autogenerated"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"release"</span>: <span class="string">"2016.07.17-11.36.13"</span>,</span><br><span class="line">  <span class="string">"content_url"</span>: <span class="string">"http://kaibin.me/hotcode"</span>,</span><br><span class="line">  <span class="string">"update"</span>: <span class="string">"now"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、将项目www目录代码上传到服务器可访问的目录里"><a href="#9、将项目www目录代码上传到服务器可访问的目录里" class="headerlink" title="9、将项目www目录代码上传到服务器可访问的目录里"></a>9、将项目www目录代码上传到服务器可访问的目录里</h2><p>例如在服务器根目录创建hotcode命名的目录将项目www里的文件上传上去</p><h2 id="10、-关闭我们的应用重新打开，看看代码是否更新成功"><a href="#10、-关闭我们的应用重新打开，看看代码是否更新成功" class="headerlink" title="10、 关闭我们的应用重新打开，看看代码是否更新成功"></a>10、 关闭我们的应用重新打开，看看代码是否更新成功</h2><h1 id="优化流程"><a href="#优化流程" class="headerlink" title="优化流程"></a>优化流程</h1><h2 id="1-创建cordova-hcp模板"><a href="#1-创建cordova-hcp模板" class="headerlink" title="1.创建cordova-hcp模板"></a>1.创建cordova-hcp模板</h2><p>线上测试可卸载掉 cordova-hot-code-push-local-dev-addon防止每次自动更新新版本，可通过命令卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin remove cordova-hot-code-push-local-dev-addon</span><br></pre></td></tr></table></figure><p>可以在 cordova 项目根目录下放一个 cordova-hcp.json，这是个模板文件</p><p>这样每次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova-hcp build</span><br></pre></td></tr></table></figure><p>就会利用这个模板生成新的 <code>chcp.json</code>，而不用手动更改 <code>www/chcp.json</code>了。</p><p>cordova-hcp.json内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"autogenerated"</span>: <span class="literal">true</span>, <span class="attr">"content_url"</span>: <span class="string">"http://kaibin.me/hotcode"</span>,</span><br><span class="line">"min_native_interface": 1, // app内核版本号</span><br><span class="line">"ios_identifier": "https://itunes.apple.com/cn/app/***", // iOS上线后的地址，用于内核版本更新后的确认跳转</span><br><span class="line">"update": "now"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Build-options-build设置，配置开发环境、测试环境与生产环境"><a href="#2-Build-options-build设置，配置开发环境、测试环境与生产环境" class="headerlink" title="2.Build options build设置，配置开发环境、测试环境与生产环境"></a>2.Build options build设置，配置开发环境、测试环境与生产环境</h2><ul><li>在 /Cordova/Testproject/ 下创建 chcpbuild.options 文件，文件内容如下:</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"dev"</span>: &#123;</span><br><span class="line"><span class="attr">"config-file"</span>: <span class="string">"https://dev.kaibin.me/hotcode/www/chcp.json"</span>  &#125;,</span><br><span class="line"><span class="attr">"production"</span>:&#123;</span><br><span class="line">  <span class="attr">"config-file"</span>:</span><br><span class="line">  <span class="string">"https://kaibin.me/hotcode/chcp.json"</span></span><br><span class="line">&#125;,</span><br><span class="line">  <span class="attr">"QA"</span>: &#123;</span><br><span class="line">  <span class="attr">"config-file"</span>:<span class="string">"https://test.kaibin.me/hotcode/chcp.json"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样在build app的时候, 转为开发要用的服务器, 可执行:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic build -- chcp-dev</span><br></pre></td></tr></table></figure><p>结果就是, 特定拍下的 config.xml 文件(比如, /Cordova/TestProject/platforms/android/res/xml/config.xml) 变成了这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;chcp&gt;</span><br><span class="line">&lt;config-file url=<span class="string">"https://dev.kaibin.me/hotcode/chcp.json"</span>/&gt;&lt;/chcp&gt;</span><br></pre></td></tr></table></figure><ul><li>当我们需要上架app的时候 (Google Play, App Store) - 我们正常build:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic build --release</span><br></pre></td></tr></table></figure><p>这样 config.xml 不会改变</p><p>如果没有使用 chcpbuild.options 插件会使用 config.xml 里面默认的值。</p><p>文件必须位于 Cordova 项目根目录. 在这个文件里面，指定(JSON格式) 所有想改变 config.xml 文件的配置，源文件 config.xml (Cordova项目根目录) 不会发生变动, 改变的是 特定平台下的 config.xml (在cordova build过程的 after_prepare 阶段)。</p><h2 id="通过min-native-interface监控app是否提示更新"><a href="#通过min-native-interface监控app是否提示更新" class="headerlink" title="通过min_native_interface监控app是否提示更新"></a>通过min_native_interface监控app是否提示更新</h2><p>所需最小的外壳app版本. 这是app的build版本号，是个整型数字, 不是应用商店中看到的形如”1.0.0”字符串。</p><p>在 config.xml中，这样指定build版本号:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;chcp&gt;</span><br><span class="line">&lt;native-interface version=<span class="string">"1"</span>/&gt;</span><br><span class="line">&lt;config-file url=<span class="string">"http://kaibin.me/hotcode/chcp.json"</span>/&gt;&lt;/chcp&gt;</span><br></pre></td></tr></table></figure><p>与www目录下的chcp.json里面的min_native_interface数值相对应</p><p>例如：app外壳里的config.xml是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;chcp&gt;</span><br><span class="line">&lt;native-interface version=<span class="string">"1"</span>/&gt;</span><br><span class="line">&lt;config-file url=<span class="string">"http://kaibin.me/hotcode/chcp.json"</span>/&gt;&lt;/chcp&gt;</span><br></pre></td></tr></table></figure><p>若服务器里的min_native_interface也对应是1，不会出现提示用户升级的状态，正常修改www目录的内容通过更新release值，可实现热更新。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"autogenerated"</span>: <span class="literal">true</span>,</span><br><span class="line">"content_url": "http://kaibin.me/hotcode",  "min_native_interface": 1, // app内核版本号 "ios_identifier": "https://itunes.apple.com/cn/app/***", // iOS上线后的地址，用于内核版本更新后的确认跳转</span><br><span class="line">"release": "2017.07.17-12.22.11",</span><br><span class="line">"update": "now"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设你的外壳app加了个新的插件，应该会更新外壳app。为了防止用户通过热更新下载了不适合他现有外壳app的web内容，你应该设置 min_native_interface 这个值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"autogenerated"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"content_url"</span>: <span class="string">"http://kaibin.me/hotcode"</span>,</span><br><span class="line">"min_native_interface": 1, // app内核版本号</span><br><span class="line">"ios_identifier": "https://itunes.apple.com/cn/app/***", // iOS上线后的地址，用于内核版本更新后的确认跳转</span><br><span class="line">"release": "2017.07.17-12.28.21",</span><br><span class="line">"min_native_interface": 2，</span><br><span class="line">"update": "now"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插件加载到这段json的时候, 发现 min_native_interface 比当前外壳app的build号要大，便不会下载web内容。而是触发一个chcp_updateLoadFailed 错误通知, 告诉用户需要升级外壳app了。</p><h3 id="chcp-json中update字段含义"><a href="#chcp-json中update字段含义" class="headerlink" title="chcp.json中update字段含义"></a>chcp.json中update字段含义</h3><p>指定了什么时候安装web内容更新，支持的值有：</p><blockquote><p>start - app启动时安装更新，默认值</p><p>resume - app从后台切换过来的时候安装更新</p><p>now - web内容下载完毕即安装更新</p></blockquote><h1 id="引导用户去应用商店更新外壳app或下载新版本"><a href="#引导用户去应用商店更新外壳app或下载新版本" class="headerlink" title="引导用户去应用商店更新外壳app或下载新版本"></a>引导用户去应用商店更新外壳app或下载新版本</h1><p>通过给web更新设置最小支持的外壳app版本 min_native_interface。 如果插件检查发现用户安装的外壳app版本比服务端新的web内容要求的版本要低，就会触发错误事件，错误码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW</span><br></pre></td></tr></table></figure><p>通过这个错误码可通过弹窗提示用户去升级，跳转到AppStore或下载新安装包（国内因GFW，跳转到google应用商店就算了＝ ＝）</p><ul><li>chcp.json 里增加min_native_interface的值</li><li>js端监听相应事件，并在出现错误的时候调用 chcp.requestApplicationUpdate 方法</li><li><a href="https://github.com/apache/cordova-plugin-file" target="_blank" rel="noopener">cordova-plugin-file</a>，<a href="https://github.com/apache/cordova-plugin-file-transfer" target="_blank" rel="noopener">cordova-plugin-file-transfer</a>，<a href="https://github.com/pwlin/cordova-plugin-file-opener2" target="_blank" rel="noopener">cordova-plugin-file-opener2</a>先把这几个插件安装好</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> appUpdate = &#123;</span><br><span class="line">        <span class="comment">// Application Constructor</span></span><br><span class="line">        initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bindEvents();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Bind any events that are required.</span></span><br><span class="line">        <span class="comment">// Usually you should subscribe on 'deviceready' event to know, when you can start calling cordova modules</span></span><br><span class="line">        bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">'deviceready'</span>, <span class="keyword">this</span>.onDeviceReady, <span class="literal">false</span>);</span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">'chcp_updateLoadFailed'</span>, <span class="keyword">this</span>.onUpdateLoadError, <span class="literal">false</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// deviceready Event Handler</span></span><br><span class="line">        onDeviceReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        onUpdateLoadError: <span class="function"><span class="keyword">function</span>(<span class="params">eventData</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> error = eventData.detail.error;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当检测出内核版本过小</span></span><br><span class="line">            <span class="keyword">if</span> (error &amp;&amp; error.code == chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW) &#123;</span><br><span class="line">                <span class="keyword">var</span> dialogMessage = <span class="string">'有新的版本,请下载更新'</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// iOS端 直接弹窗提示升级，点击ok后自动跳转</span></span><br><span class="line">                <span class="keyword">if</span>(ionic.Platform.isIOS())&#123;</span><br><span class="line">                    chcp.requestApplicationUpdate(dialogMessage, <span class="keyword">this</span>.userWentToStoreCallback, <span class="keyword">this</span>.userDeclinedRedirectCallback);</span><br><span class="line">                <span class="comment">// Android端 提示升级下载最新APK文件</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ionic.Platform.isAndroid())&#123;</span><br><span class="line">                    <span class="keyword">var</span> confirmPopup = $ionicPopup.confirm(&#123;</span><br><span class="line">                        template: <span class="string">'有新的版本,请下载更新'</span>,</span><br><span class="line">                        cssClass: <span class="string">'popup'</span>,</span><br><span class="line">                        cancelText:<span class="string">'取消'</span>,</span><br><span class="line">                        okText:<span class="string">'升级'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    confirmPopup.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                            $ionicLoading.show(&#123;</span><br><span class="line">                                template: <span class="string">"已经下载：0%"</span></span><br><span class="line">                            &#125;);</span><br><span class="line">                            <span class="built_in">window</span>.resolveLocalFileSystemURL(cordova.file.externalRootDirectory, <span class="function"><span class="keyword">function</span>(<span class="params">fileEntry</span>) </span>&#123;</span><br><span class="line">                                fileEntry.getDirectory(<span class="string">"***(app名称)"</span>, &#123; <span class="attr">create</span>: <span class="literal">true</span>, <span class="attr">exclusive</span>: <span class="literal">false</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">fileEntry</span>) </span>&#123;</span><br><span class="line">                                    <span class="comment">//下载代码</span></span><br><span class="line">                                    <span class="keyword">var</span> fileTransfer = <span class="keyword">new</span> FileTransfer();</span><br><span class="line">                                    fileTransfer.download(<span class="string">"app下载地址"</span>, fileEntry.toInternalURL()+<span class="string">"***(app名称).apk"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">entry</span>) </span>&#123;</span><br><span class="line">                                        <span class="comment">// 打开下载下来的APP</span></span><br><span class="line">                                        cordova.plugins.fileOpener2.open(</span><br><span class="line">                                            entry.toInternalURL(),<span class="comment">//下载文件保存地址</span></span><br><span class="line">                                            <span class="string">'application/vnd.android.package-archive'</span>, &#123;<span class="comment">//以APK文件方式打开</span></span><br><span class="line">                                                error: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                                success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">                                            &#125;);</span><br><span class="line">                                    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                                    &#125;,<span class="literal">true</span>);</span><br><span class="line">                                    fileTransfer.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">                                        $timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                            <span class="keyword">var</span> downloadProgress = (progressEvent.loaded / progressEvent.total) * <span class="number">100</span>;</span><br><span class="line">                                            $ionicLoading.show(&#123;</span><br><span class="line">                                                template: <span class="string">"已经下载："</span> + <span class="built_in">Math</span>.floor(downloadProgress) + <span class="string">"%"</span></span><br><span class="line">                                            &#125;);</span><br><span class="line">                                            <span class="keyword">if</span> (downloadProgress &gt; <span class="number">99</span>) &#123;</span><br><span class="line">                                                $ionicLoading.hide();</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;);</span><br><span class="line">                                    &#125;;</span><br><span class="line">                                &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;alert(<span class="string">"创建失败"</span>)&#125;);</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        userWentToStoreCallback: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// user went to the store from the dialog</span></span><br><span class="line">        &#125;,</span><br><span class="line">        userDeclinedRedirectCallback: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// User didn't want to leave the app.</span></span><br><span class="line">            <span class="comment">// Maybe he will update later.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    appUpdate.initialize();</span><br></pre></td></tr></table></figure><h1 id="iOS与Android的出现的问题"><a href="#iOS与Android的出现的问题" class="headerlink" title="iOS与Android的出现的问题"></a>iOS与Android的出现的问题</h1><p>在build ios的app时config.xml的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;name&gt;***&lt;/name&gt;</span><br></pre></td></tr></table></figure><p>name不可使用中文，设置app名称为中文，可通过Xcode修改Resources目录下的<code>***-Info.plist</code>内的<code>Bundle display name</code>字段即可</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> ionic </tag>
            
            <tag> cordova </tag>
            
            <tag> 热更新 </tag>
            
            <tag> 升级下载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac平台 ReactNative iOS&amp;Android 开发环境搭建总结</title>
      <link href="/2015/12/17/react-native-build/"/>
      <url>/2015/12/17/react-native-build/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><p>Homebrew 是 Mac 中的一个包管理器。没有安装的话，<a href="http://brew.sh" target="_blank" rel="noopener">点击这里安装</a> 我的版本如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ brew -v                                                                                                          ⬡ 5.0.0</span><br><span class="line">Homebrew 0.9.5 (git revision 576d6f; last commit 2015-10-10)</span><br></pre></td></tr></table></figure><p>版本更新使用：<code>brew update</code></p><a id="more"></a><h2 id="安装Node-js-和-npm"><a href="#安装Node-js-和-npm" class="headerlink" title="安装Node.js 和 npm"></a>安装Node.js 和 npm</h2><p>Node.js 需要 <em>4.0</em>(注意这里，之前就是一直默认使用的是io-js版本导致一直报错) 及其以上版本。安装好之后，npm 也有了</p><ul><li>通过 <code>nvm</code> 安装 <code>Node.js</code><br>  安装 nvm 可以通过 Homebrew 安装:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><p>注：<code>nvm</code> 可以管理多个版本的Node和iojs<br>然后安装 Node.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node &amp;&amp; nvm <span class="built_in">alias</span> default node</span><br></pre></td></tr></table></figure><ul><li>安装 <code>watchman</code> 和 <code>flow</code><br>这两个包分别是监控文件变化和类型检查的。安装如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install watchman</span><br><span class="line">brew install flow</span><br></pre></td></tr></table></figure><h1 id="安装-React-Native"><a href="#安装-React-Native" class="headerlink" title="安装 React-Native"></a>安装 React-Native</h1><p>通过 npm 安装即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><ul><li><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2>  XCode 6.3 及其以上即可。</li><li><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2></li></ul><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>官网下载最新版本安装</p><h3 id="SDK下载"><a href="#SDK下载" class="headerlink" title="SDK下载"></a>SDK下载</h3><p>启动 Android Studio， 选择”Preferences”–&gt;”Appearance &amp; Behavior”–&gt;”System Settings”–&gt;”Android SDK”–&gt;”Launch Standalone SDK Manager”,勾选以下项目：</p><pre><code>* Android SDK Build-tools version 23.0.1* Android 6.0 (API 23)* Android Support Repository</code></pre><p>这一步也需要翻墙，经过漫长的等待之后，成功安装。</p><h3 id="定义ANDROID-HOME环境变量"><a href="#定义ANDROID-HOME环境变量" class="headerlink" title="定义ANDROID_HOME环境变量"></a>定义ANDROID_HOME环境变量</h3><p>往你的<code>~/.bashrc</code>, <code>~/.bash_profile</code> 或者你终端所用的其它配置文件中增加以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你是通过Homebrew安装SDK的，则加入下列路径</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/usr/<span class="built_in">local</span>/opt/android-sdk</span><br><span class="line"><span class="comment"># 否则可能是（当然具体视你把SDK放在哪）：</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=~/Library/Android/sdk</span><br></pre></td></tr></table></figure><p>最后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile <span class="comment"># 立即生效</span></span><br></pre></td></tr></table></figure><h1 id="初始化一个项目"><a href="#初始化一个项目" class="headerlink" title="初始化一个项目"></a>初始化一个项目</h1><p>在项目根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init AwesomeProject</span><br></pre></td></tr></table></figure><p>初始化一个项目，其中 AwesomeProject 是项目名字，可随意修改。等待一段时间之后（具体视网络情况而定，需要翻墙），项目初始化完成。</p><h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><ul><li>iOS</li></ul><p><code>XCode</code> 打开项目，点击运行就好。修改 <code>index.ios.js</code>, 在模拟器中 <code>⌘ + R</code> 重新载入 <code>js</code> 即可看到相应的变化。iOS 真机调试，修改HTTP地址即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsCodeLocation = [NSURL URLWithString:@<span class="string">"http://localhost:8081/index.ios.bundle"</span>];</span><br></pre></td></tr></table></figure><ul><li>Android<br>  需要一个<code>Genymotion</code>模拟器,官方下载个人开发者免费还是挺不错的，<a href="https://www.genymotion.com/" target="_blank" rel="noopener">这里是模拟器地址</a>,使用模拟器还需要用到虚拟机，使用免费VirtualBox即可。<br>运行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android</span><br></pre></td></tr></table></figure><p>然后就会部署到模拟器，修改 <code>index.android.js</code> ，调出模拟器菜单键，选择重新载入 <code>js</code> 即可看到变化。</p><ul><li>Android 真机调试<br>  示例 APP 直接部署到真机，红色界面报错，无法连接到 Debug Server<br>  如果是 5.0 或者以上机型，可通过 adb 反向代理端口，将 Mac 端口反向代理到测试机上。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reverse tcp:8081 tcp:8081</span><br></pre></td></tr></table></figure><p>如果 5.0 以下机器，应用安装到测试机上之后，摇动设备，在弹出菜单中选择 Dev Setting &gt; Debug Server host for device，然后填入 Mac 的 IP 地址（ifconfig 命令可查看本机 IP）</p><ul><li>在 Android Studio 中调试开发(暂未尝试)<br>可能希望在 Android Studio 打开项目，然后编译部署到真机。<br>这个时候，在命令行启动 Debug Server 即可：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用ionic构建iOS与Android客户端</title>
      <link href="/2015/10/30/ionic-build/"/>
      <url>/2015/10/30/ionic-build/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g cordova ionic ios-sim</span><br></pre></td></tr></table></figure><p>ionic官网为开发者提供了多个开发模板，如：</p><p>空白模板（Black app）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic start myApp blank</span><br></pre></td></tr></table></figure><p>tabs模板 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic start myApp tabs</span><br></pre></td></tr></table></figure><p>sidemenu模板：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic start myApp sidemenu</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> myIonicApp</span><br><span class="line">ionic platform add ios</span><br><span class="line">ionic build ios</span><br><span class="line">ionic prepare ios  重新打包</span><br><span class="line">ionic <span class="built_in">emulate</span> ios</span><br><span class="line">ionic <span class="built_in">emulate</span> ios -livereload</span><br><span class="line">ionic platform remove ios</span><br></pre></td></tr></table></figure><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="Run-1"><a href="#Run-1" class="headerlink" title="Run"></a>Run</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> myIonicApp</span><br><span class="line">ionic platform add android</span><br><span class="line">ionic build android</span><br><span class="line">ionic <span class="built_in">emulate</span> android (模拟器运行)</span><br><span class="line">ionic run android (连接上手机运行)</span><br><span class="line">ionic prepare android 重新打包</span><br><span class="line">ionic platform remove android 移除环境</span><br></pre></td></tr></table></figure><h3 id="下载Android-Studio"><a href="#下载Android-Studio" class="headerlink" title="下载Android Studio"></a>下载Android Studio</h3><p><a href="http://developer.android.com/sdk/index.html" target="_blank" rel="noopener">http://developer.android.com/sdk/index.html</a></p><p>选择Tools &gt; Android &gt; <code>SDK Manager</code><br>选择下方<code>Launch Standalone SDK Manager</code>更新sdk</p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="string">"/Users/Kai/Library/Android/sdk"</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_PLATFORM_TOOLS=<span class="string">"/Users/Kai/Library/Android/sdk/platform-tools"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_PLATFORM_TOOLS</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>来源：<a href="http://stackoverflow.com/questions/28076575/phonegap-cordova-no-such-file-build-template" target="_blank" rel="noopener">http://stackoverflow.com/questions/28076575/phonegap-cordova-no-such-file-build-template</a></p></blockquote><p>选择Tools &gt; Android &gt; <code>Sync Project with Gradle Files</code></p><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><p>android 5.0开始默认安装jdk1.7才能编译，但是由于mac系统自带jdk的版本是1.6，所以需要手动下载jdk1.7并配置</p><p>下载新Java</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p><p>Mac OSX 10.9以后系统就自带了Java 6的环境，路径在:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p>如果想要安装升级到Java 7的环境，步骤如下：</p><p>1.到Oracle官网下载系统对应JDK7的安装包, 地址在这里,安装成功后JDK7默认的路径在:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk1.7.0_60.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p>2.安装成功后配置环境变量</p><p>在.bash_profile文件中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=$(/usr/libexec/java_home)</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>需要说明的是Mac OSX 10.5之后苹果就建议设置<code>$JAVA_HOME</code>变量到<code>/usr/libexec/java_home</code></p><p>3.设置完成后输入下列命令测试下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$java</span> -version</span><br><span class="line">java version <span class="string">"1.7.0_60"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0_60-b19)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.60-b09, mixed mode)</span><br></pre></td></tr></table></figure><h1 id="查看系统安装的java版本"><a href="#查看系统安装的java版本" class="headerlink" title="查看系统安装的java版本"></a>查看系统安装的java版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$/usr/libexec/java_home -V</span><br><span class="line">Matching Java Virtual Machines (3):</span><br><span class="line">1.7.0_60, x86_64:<span class="string">"Java SE 7"</span></span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.7.0_60.jdk/Contents/Home</span><br><span class="line">1.6.0_65-b14-462, x86_64:<span class="string">"Java SE 6"</span>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</span><br><span class="line">1.6.0_65-b14-462, i386:<span class="string">"Java SE 6"</span>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</span><br></pre></td></tr></table></figure><h1 id="返回系统安装的java最高版本"><a href="#返回系统安装的java最高版本" class="headerlink" title="返回系统安装的java最高版本"></a>返回系统安装的java最高版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$/usr/libexec/java_home</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.7.0_60.jdk/Contents/Home</span><br></pre></td></tr></table></figure><blockquote><p>来源：<a href="http://stormzhang.com/android/2014/06/27/manage-java-on-macosx/" target="_blank" rel="noopener">http://stormzhang.com/android/2014/06/27/manage-java-on-macosx/</a></p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>Exception in thread “main” java.lang.RuntimeException: java.util.zip.ZipException: error in opening zip file<br>at org.gradle.wrapper.</p></blockquote><ul><li>下载Gradle( <a href="http://services.gradle.org/distributions/gradle-2.2.1-all.zip" target="_blank" rel="noopener">http://services.gradle.org/distributions/gradle-2.2.1-all.zip</a>)</li></ul><p>复制它放到这里变成这样<code>myApp\platforms\android\gradle\gradle-2.2.1-all.zip</code></p><p>然后编辑<code>myApp\platforms\android\cordova\lib\build.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> distributionUrl = <span class="string">'distributionUrl=http\\://services.gradle.org/distributions/gradle-2.2.1-all.zip'</span>;</span><br></pre></td></tr></table></figure><p> 替换成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> distributionUrl = <span class="string">'distributionUrl=../gradle-2.2.1-all.zip'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>来源：<a href="http://stackoverflow.com/questions/29874564/ionic-build-android-error-when-download-gradle" target="_blank" rel="noopener">http://stackoverflow.com/questions/29874564/ionic-build-android-error-when-download-gradle</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> ionic </tag>
            
            <tag> cordova </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ionic技巧与坑</title>
      <link href="/2015/09/27/ionic-skill/"/>
      <url>/2015/09/27/ionic-skill/</url>
      
        <content type="html"><![CDATA[<h2 id="应用Build时报错-Cordova-app-failing-to-Archive-with-Xcode-7-1-Cordova-CDVViewController-h-file-not-found"><a href="#应用Build时报错-Cordova-app-failing-to-Archive-with-Xcode-7-1-Cordova-CDVViewController-h-file-not-found" class="headerlink" title="应用Build时报错 Cordova app failing to Archive with Xcode 7.1 (Cordova/CDVViewController.h file not found)"></a>应用Build时报错 Cordova app failing to Archive with Xcode 7.1 (Cordova/CDVViewController.h file not found)</h2><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>加入这行命令在 <code>Build Settings -&gt; Header Search Paths</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"<span class="variable">$(OBJROOT)</span>/UninstalledProducts/<span class="variable">$(PLATFORM_NAME)</span>/include"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Ionic-IOS9访问http受到限制"><a href="#Ionic-IOS9访问http受到限制" class="headerlink" title="Ionic IOS9访问http受到限制"></a>Ionic IOS9访问http受到限制</h2><h3 id="错误："><a href="#错误：" class="headerlink" title="错误："></a>错误：</h3><p><code>Application Transport Security has blocked a cleartext HTTP (http\://) resource load since it is insecure. Temporary exceptions can be configured via your app&#39;s Info.plist file.</code></p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>手动在 <code>项目名-Info.plist</code>第一个<code>&lt;dict&gt;</code>标签下添加下面标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="cordova-插件使用命令"><a href="#cordova-插件使用命令" class="headerlink" title="cordova 插件使用命令"></a>cordova 插件使用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//安装插件</span><br><span class="line">cordova plugin add org.apache.cordova.device</span><br><span class="line"></span><br><span class="line">//查看插件列表</span><br><span class="line">cordova plugin list</span><br><span class="line"></span><br><span class="line">//删除插件</span><br><span class="line">cordova plugin remove org.apache.cordova.device</span><br></pre></td></tr></table></figure><h2 id="隐藏topbar"><a href="#隐藏topbar" class="headerlink" title="隐藏topbar"></a>隐藏topbar</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-view</span> <span class="attr">hide-nav-bar</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关闭安卓转场特效"><a href="#关闭安卓转场特效" class="headerlink" title="关闭安卓转场特效"></a>关闭安卓转场特效</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ionicConfigProvider. platform.android.views.transition=none</span><br><span class="line">maxCache也要设置成<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="多modal显示问题"><a href="#多modal显示问题" class="headerlink" title="多modal显示问题"></a>多modal显示问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ionicModal.fromTemplateUrl(<span class="string">'templates/modal-login.html'</span>, &#123;</span><br><span class="line">        id: <span class="string">'login'</span>,</span><br><span class="line">        scope: $scope,</span><br><span class="line">        animation: <span class="string">'slide-in-up'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">modal</span>) </span>&#123;</span><br><span class="line">        $scope.modalLogin = modal;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $scope.openModal = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="string">'login'</span>)&#123;</span><br><span class="line">        $scope.modalLogin.show();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    $scope.closeModal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $scope.modalLogin.hide();</span><br><span class="line">    &#125;;</span><br><span class="line">    $scope.$on(<span class="string">'$destroy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $scope.modalLogin.remove();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>加入id 索引值来区分多个modal</p></blockquote><h2 id="使Chrome和Chromium实现跨域请求"><a href="#使Chrome和Chromium实现跨域请求" class="headerlink" title="使Chrome和Chromium实现跨域请求"></a>使Chrome和Chromium实现跨域请求</h2><p>通过命令行启动:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open -a <span class="string">"Google Chrome"</span> --args --<span class="built_in">disable</span>-web-security</span><br><span class="line">open -a <span class="string">"Chromium"</span> --args --<span class="built_in">disable</span>-web-security</span><br></pre></td></tr></table></figure><h2 id="cordova-ionic-emulate-时选择模拟器版本（iOS）"><a href="#cordova-ionic-emulate-时选择模拟器版本（iOS）" class="headerlink" title="cordova/ionic emulate 时选择模拟器版本（iOS）"></a>cordova/ionic emulate 时选择模拟器版本（iOS）</h2><p>在项目的根目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./platforms/ios/cordova/lib/list-emulator-images</span><br><span class="line">iPhone-4s</span><br><span class="line">iPhone-5</span><br><span class="line">iPhone-5s</span><br><span class="line">iPhone-6-Plus</span><br><span class="line">iPhone-6</span><br><span class="line">iPad-2</span><br><span class="line">iPad-Retina</span><br><span class="line">iPad-Air</span><br><span class="line">Resizable-iPhone</span><br><span class="line">Resizable-iPad</span><br></pre></td></tr></table></figure><p>运行模拟器任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic run ios --target iPhone-5</span><br></pre></td></tr></table></figure><blockquote><p>注意：iPhone别写成iphone。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ionic </tag>
            
            <tag> Angularjs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用webpack搭建ReactJS环境安装流程</title>
      <link href="/2015/06/10/webpack-reactjs-build/"/>
      <url>/2015/06/10/webpack-reactjs-build/</url>
      
        <content type="html"><![CDATA[<p>webpack搭建ReactJS环境首先看下项目模型</p><h1 id="项目模型"><a href="#项目模型" class="headerlink" title="项目模型"></a>项目模型</h1><p>/app<br>- main.js<br>- TestOne.js<br>- TestTwo.js<br>/build<br>- bundle.js(会通过webpack自动生成)<br>- index.html<br>- package.json<br>- webpack.config.js</p><a id="more"></a><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir app build &amp;&amp; touch webpack.config.js app/main.js app/TestOne.js app/TestTwo.js build/index.html</span><br></pre></td></tr></table></figure><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.js */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">var</span> TestOne = <span class="built_in">require</span>(<span class="string">'./TestOne.js'</span>);</span><br><span class="line"><span class="keyword">var</span> TestTwo = <span class="built_in">require</span>(<span class="string">'./TestTwo.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="keyword">switch</span>: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    _toggle() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            <span class="keyword">switch</span>: !<span class="keyword">this</span>.state.switch</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>._toggle&#125; value=<span class="string">"Press Me!"</span>/&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.switch ? <span class="xml"><span class="tag">&lt;<span class="name">TestOne</span> /&gt;</span> : <span class="tag">&lt;<span class="name">TestTwo</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>      </span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Main</span> /&gt;</span>, document.body);</span></span><br></pre></td></tr></table></figure><h2 id="TestOne-js"><a href="#TestOne-js" class="headerlink" title="TestOne.js"></a>TestOne.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* TestOne.js */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> TestOne = React.createClass(&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">/* jshint ignore: start*/</span></span><br><span class="line">            &lt;div&gt;Hello I am TestOne Component&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            /</span>* jshint ignore: end*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">module.exports = TestOne;</span></span><br></pre></td></tr></table></figure><h2 id="TestTwo-js"><a href="#TestTwo-js" class="headerlink" title="TestTwo.js"></a>TestTwo.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* TestTwo.js */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> TestTwo = React.createClass(&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">/* jshint ignore: start*/</span></span><br><span class="line">            &lt;h1&gt;Hello I am TestTwo Component&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            /</span>* jshint ignore: end*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">module.exports = TestTwo;</span></span><br></pre></td></tr></table></figure><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-dev-server react-hot-loader babel-loader --save-dev</span><br><span class="line">npm install --save style-loader css-loader less-loader autoprefixer-loader</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init  // 创建 package.json</span><br></pre></td></tr></table></figure><p>首先，先到 <code>package.json</code> 內加入一個新 <code>dev</code> 的指令:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --devtool eval --progress --colors --hot --content-base build"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著更新 <code>index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/webpack-dev-server.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>webpack.config.js</code>为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    entry: [<span class="string">'webpack-dev-server/client?http://localhost:8080'</span>,</span><br><span class="line">    <span class="string">'webpack/hot/only-dev-server'</span>,</span><br><span class="line">    path.resolve(__dirname, <span class="string">'app/main.js'</span>)],</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loaders: [<span class="string">'react-hot'</span>, <span class="string">'babel'</span>],</span><br><span class="line">        include: path.join(__dirname, <span class="string">'app'</span>)</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">    test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">loader: <span class="string">'style-loader!css-loader!autoprefixer-loader!less-loader'</span></span><br><span class="line">&#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="comment">//new webpack.HotModuleReplacementPlugin(),</span></span><br><span class="line">    <span class="keyword">new</span> webpack.NoErrorsPlugin()</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8080/webpack-dev-server/" target="_blank" rel="noopener">http://localhost:8080/webpack-dev-server/</a> 尝试是否跑起来</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> ReactJs </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
